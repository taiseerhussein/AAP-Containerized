---
- name: Provision EC2 instance and install Ansible Automation Platform 2.5
  hosts: localhost
  gather_facts: false
  vars:
    vpc_name: "AAP-VPC"
    cidr_block: "10.0.0.0/16"
    subnet_name: "AAP-Subnet"
    subnet_cidr: "10.0.1.0/24"
    internet_gateway_name: "AAP-IGW"
    route_table_name: "AAP-Route-Table"
    security_group_name: "AAP-SG"
    instance_name: "AAP-EC2-Instance"
    instance_type: "t2.medium"
    keypair_name: "dynamic-keypair"
    keypair_file_path: "/tmp/{{ keypair_name }}.pem"
    region: "us-east-2"
    ami_id: "ami-07d1f1503dcde4ca5"  # Replace with the latest Amazon Linux 2 AMI for your region

  tasks:
    # VPC Creation
    - name: Check if VPC exists
      amazon.aws.ec2_vpc_net_info:
        filters:
          "tag:Name": "{{ vpc_name }}"
      register: vpc_info

    - name: Create VPC if not present
      amazon.aws.ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ cidr_block }}"
        enable_dns_support: true
        enable_dns_hostnames: true
        region: "{{ region }}"
      when: vpc_info.vpcs | length == 0
      register: vpc_result

    - name: Set VPC ID based on creation or lookup
      set_fact:
        vpc_id: "{{ (vpc_result.vpc.id if vpc_info.vpcs | length == 0 else vpc_info.vpcs[0].vpc_id) }}"

    # Subnet Creation
    - name: Check if Subnet exists
      amazon.aws.ec2_vpc_subnet_info:
        filters:
          "tag:Name": "{{ subnet_name }}"
      register: subnet_info

    - name: Create Subnet if not present
      amazon.aws.ec2_vpc_subnet:
        name: "{{ subnet_name }}"
        vpc_id: "{{ vpc_id }}"
        cidr: "{{ subnet_cidr }}"
        region: "{{ region }}"
        map_public: true
      when: subnet_info.subnets | length == 0
      register: subnet_result

    - name: Set Subnet ID based on creation or lookup
      set_fact:
        subnet_id: "{{ (subnet_result.subnet.id if subnet_info.subnets | length == 0 else subnet_info.subnets[0].subnet_id) }}"

    # Internet Gateway and Route Table Creation
    - name: Check if Internet Gateway exists
      amazon.aws.ec2_vpc_igw_info:
        filters:
          "tag:Name": "{{ internet_gateway_name }}"
      register: igw_info

    - name: Create Internet Gateway if not present
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc_id }}"
        name: "{{ internet_gateway_name }}"
        region: "{{ region }}"
      when: igw_info.internet_gateways | length == 0
      register: igw_result

    - name: Check if Route Table exists
      amazon.aws.ec2_vpc_route_table_info:
        filters:
          "tag:Name": "{{ route_table_name }}"
      register: route_table_info

    - name: Create Route Table if not present
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc_id }}"
        name: "{{ route_table_name }}"
        region: "{{ region }}"
      when: route_table_info.route_tables | length == 0
      register: route_table_result

    - name: Associate Subnet with Route Table
      amazon.aws.ec2_vpc_route_table:
        route_table_id: "{{ route_table_result.route_table.id }}"
        subnet_id: "{{ subnet_id }}"
        region: "{{ region }}"
      when: route_table_info.route_tables | length == 0

    - name: Add default route to Internet Gateway in Route Table
      amazon.aws.ec2_vpc_route_table:
        route_table_id: "{{ route_table_result.route_table.id }}"
        destination_cidr_block: "0.0.0.0/0"
        gateway_id: "{{ (igw_result.internet_gateway.id if igw_info.internet_gateways | length == 0 else igw_info.internet_gateways[0].internet_gateway_id) }}"
        region: "{{ region }}"

    # Security Group Creation
    - name: Check if Security Group exists
      amazon.aws.ec2_security_group_info:
        filters:
          "tag:Name": "{{ security_group_name }}"
      register: sg_info

    - name: Create Security Group if not present
      amazon.aws.ec2_security_group:
        name: "{{ security_group_name }}"
        description: "Security group for AAP EC2 instance"
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "0.0.0.0/0"  # Allow SSH
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: "0.0.0.0/0"  # Allow HTTP
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: "0.0.0.0/0"  # Allow HTTPS
      when: sg_info.security_groups | length == 0
      register: sg_result

    - name: Set Security Group ID based on creation or lookup
      set_fact:
        sg_id: "{{ (sg_result.group_id if sg_info.security_groups | length == 0 else sg_info.security_groups[0].group_id) }}"

    # Create SSH Keypair
    - name: Create an SSH keypair
      amazon.aws.ec2_key:
        name: "{{ keypair_name }}"
        region: "{{ region }}"
        state: present
        key_material: "{{ lookup('file', keypair_file_path) if lookup('file', keypair_file_path, errors='ignore') else None }}"
      register: keypair_result

    - name: Save the private key to a local file (if not already saved)
      copy:
        content: "{{ keypair_result.key.private_key }}"
        dest: "{{ keypair_file_path }}"
        mode: '0600'
      when: keypair_result.key.private_key is defined

    # EC2 Instance Creation
    - name: Launch EC2 instance
      amazon.aws.ec2_instance:
        name: "{{ instance_name }}"
        key_name: "{{ keypair_name }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ ami_id }}"
        region: "{{ region }}"
        vpc_subnet_id: "{{ subnet_id }}"
        security_groups: "{{ sg_id }}"
        wait: yes
        assign_public_ip: yes
      register: ec2_instance

    - name: Output the instance public IP
      debug:
        msg: "EC2 instance public IP: {{ ec2_instance.public_ip }}"

    #  Install Docker on EC2 Instance
    - name: Wait for SSH to become available
      wait_for_connection:
        timeout: 300
        delay: 10
      delegate_to: "{{ ec2_instance.public_ip }}"
      become: false

    - name: Install Docker on EC2 instance
      ansible.builtin.shell: |
        sudo amazon-linux-extras install docker -y
        sudo systemctl start docker
        sudo systemctl enable docker
      delegate_to: "{{ ec2_instance.public_ip }}"

    - name: Set a hostname specifying strategy
      ansible.builtin.hostname:
        name: aap-host
        use: systemd 
      register: hostname

    - name: Output hostname
      debug:
        msg: "hostname output is: {{ hostname }}" 

    - name: Output AAP access information
      debug:
        msg: "Access Ansible Automation Platform at https://{{ ec2_instance.public_ip }}"

